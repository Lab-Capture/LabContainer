version: "3.5"
services:
  studentserver:
    build: student-server
    ports:
      - "${STUDENT_PORT}:8080"
    environment:
      - SECRET_TOKEN=${SECRET_TOKEN}
    volumes:
    - /home/parth/work/sc-test/code-capture/student-server/dist:/app/dist
    networks:
      - backend
      - envnet
    restart: on-failure
  auth:
    build: auth
    ports:
      - "${AUTH_PORT}:5000"
    environment:
      - SECRET_TOKEN=${SECRET_TOKEN}
      - REFRESH_SECRET=${REFRESH_SECRET}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - authdb
      - backend
    restart: on-failure
  analytics:
    build: analytics
    ports:
      - "${ANALYTICS_PORT}:8000"
    environment:
      - SECRET_TOKEN=${SECRET_TOKEN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
      - /home/parth/work/sc-test/code-capture/sqlite.db:/app/sqlite.db
    networks:
      - backend
      - authdb
    restart: on-failure
  postgresserver:
    container_name: postgres_container
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - authdb
    restart: unless-stopped
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - authdb
    logging:
      driver: none
    restart: unless-stopped

networks:
  envnet:
    name: envnet
    driver: bridge
  backend:
    driver: bridge
  authdb:
    driver: bridge

volumes:
  postgres:
  pgadmin: